CREATE VERTEX Party (PRIMARY_ID party_id UINT, full_name STRING, email STRING, created_at DATETIME)
CREATE VERTEX Role (PRIMARY_ID role_id UINT, title STRING, created_at DATETIME)
CREATE VERTEX Resource (PRIMARY_ID resource_id UINT, name STRING)

CREATE DIRECTED EDGE IDENTIFIES_AS (FROM Party, TO Role, created_at DATETIME) WITH REVERSE_EDGE="ASSIGNED_TO"
CREATE DIRECTED EDGE HAS_ACCESS_TO (FROM Role, TO Resource) WITH REVERSE_EDGE="ACCESSIBLE_TO"

CREATE GRAPH Entitlements (*)

CREATE DATA_SOURCE KAFKA kafka_loader = "/home/tigergraph/graph-data/kafka.config" FOR GRAPH Entitlements

CREATE LOADING JOB real_time_loader FOR GRAPH entitlements {
	// DEFINE FILENAME parties = "$kafka_loader:/home/tigergraph/graph-data/parties.config";
	DEFINE FILENAME roles = "$kafka_loader:/home/tigergraph/graph-data/roles.config";
	// DEFINE FILENAME party_roles = "$kafka_loader:/home/tigergraph/graph-data/party_roles.config";

	// LOAD parties TO VERTEX Party ($"party_id", $"full_name", $"email", $"created_at");
	LOAD roles TO VERTEX Role ($"role_id", $"title", $"created_at");
	// LOAD party_roles TO EDGE IDENTIFIES_AS ($"party_id", $"role_id", $"created_at");
}

CREATE LOADING JOB load_resources FOR GRAPH Entitlements {
	DEFINE FILENAME resources "/home/tigergraph/graph-data/resources.csv";
	DEFINE FILENAME has_access_to "/home/tigergraph/graph-data/has_access_to.csv";

	LOAD resources TO VERTEX Resource VALUES ($"resource_id", $"name") USING header="true";
	LOAD has_access_to TO EDGE HAS_ACCESS_TO VALUES ($"identity_id", $"resource_id") USING header="true";
}
